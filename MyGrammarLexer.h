/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : MyGrammar.g
 *     -                            On : 2025-05-03 13:01:25
 *     -                 for the lexer : MyGrammarLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
MyGrammarLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMyGrammarLexer, which is returned from a call to MyGrammarLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pMyGrammarLexer are  as follows:
 *
 *  - 
 void
      pMyGrammarLexer->T__66(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__67(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__68(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__69(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__70(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__71(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__72(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__73(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__74(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__75(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__76(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__77(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__78(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__79(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__80(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__81(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__82(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__83(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__84(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__85(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__86(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__87(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__88(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__89(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__90(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__91(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__92(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__93(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__94(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__95(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__96(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__97(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__98(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__99(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__100(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__101(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->T__102(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Sth(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->AssignmentOp(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->WS(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Number(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->HexDigit(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Letter(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->PLUS(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->MINUS(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->MULT(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->DIV(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->AND(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->OR(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->EQ(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->NEQ(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->LARGT(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->GT(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->LEQ(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->GEQ(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Str(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Char(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Hex(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Bits(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Dec(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Bool(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Literal(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->ID(pMyGrammarLexer)
 *  - 
 void
      pMyGrammarLexer->Tokens(pMyGrammarLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MyGrammarLexer_H
#define _MyGrammarLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MyGrammarLexer_Ctx_struct MyGrammarLexer, * pMyGrammarLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
MyGrammarLexer

 */
struct MyGrammarLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__66)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__98)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__99)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__100)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__101)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mT__102)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mSth)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mAssignmentOp)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mNumber)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mHexDigit)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mLetter)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mMULT)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mNEQ)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mLARGT)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mLEQ)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mGEQ)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mStr)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mChar)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mHex)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mBits)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mDec)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mBool)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mLiteral)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct MyGrammarLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct MyGrammarLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MyGrammarLexer_Ctx_struct * ctx);
    void	    (*free)   (struct MyGrammarLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMyGrammarLexer MyGrammarLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pMyGrammarLexer MyGrammarLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define AND      4
#define ArgDef      5
#define Array      6
#define AssignmentExpr      7
#define AssignmentOp      8
#define Base      9
#define BinaryExpr      10
#define Bits      11
#define Bool      12
#define Braces      13
#define BreakStatement      14
#define Builtin      15
#define BuiltinArray      16
#define CallOrIndexer      17
#define Char      18
#define ClassDef      19
#define Custom      20
#define CustomArray      21
#define DIV      22
#define Dec      23
#define DoStatement      24
#define EQ      25
#define Element      26
#define Elements      27
#define ElseStatement      28
#define Expression      29
#define ExternFuncDef      30
#define Field      31
#define FuncDef      32
#define FuncSignature      33
#define GEQ      34
#define GT      35
#define Hex      36
#define HexDigit      37
#define ID      38
#define IfStatement      39
#define LARGT      40
#define LEQ      41
#define Letter      42
#define ListArgdef      43
#define ListExpr      44
#define ListIdentifier      45
#define Literal      46
#define MINUS      47
#define MULT      48
#define Member      49
#define NEQ      50
#define Number      51
#define OR      52
#define PLUS      53
#define Parameter      54
#define Source      55
#define Sourcer      56
#define Sth      57
#define Str      58
#define ThenStatement      59
#define TypeRef      60
#define Unary      61
#define UntilExpr      62
#define VarStatement      63
#define WS      64
#define WhileStatement      65
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MyGrammarLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
