/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : MyGrammar.g
 *     -                            On : 2024-10-03 19:07:22
 *     -                for the parser : MyGrammarParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
MyGrammarParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMyGrammarParser, which is returned from a call to MyGrammarParserNew().
 *
 * The methods in pMyGrammarParser are  as follows:
 *
 *  - 
 MyGrammarParser_translation_unit_return
      pMyGrammarParser->translation_unit(pMyGrammarParser)
 *  - 
 MyGrammarParser_external_declaration_return
      pMyGrammarParser->external_declaration(pMyGrammarParser)
 *  - 
 MyGrammarParser_function_definition_return
      pMyGrammarParser->function_definition(pMyGrammarParser)
 *  - 
 MyGrammarParser_declaration_return
      pMyGrammarParser->declaration(pMyGrammarParser)
 *  - 
 MyGrammarParser_declaration_specifiers_return
      pMyGrammarParser->declaration_specifiers(pMyGrammarParser)
 *  - 
 MyGrammarParser_init_declarator_list_return
      pMyGrammarParser->init_declarator_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_init_declarator_return
      pMyGrammarParser->init_declarator(pMyGrammarParser)
 *  - 
 MyGrammarParser_storage_class_specifier_return
      pMyGrammarParser->storage_class_specifier(pMyGrammarParser)
 *  - 
 MyGrammarParser_type_specifier_return
      pMyGrammarParser->type_specifier(pMyGrammarParser)
 *  - 
 MyGrammarParser_type_id_return
      pMyGrammarParser->type_id(pMyGrammarParser)
 *  - 
 MyGrammarParser_struct_or_union_specifier_return
      pMyGrammarParser->struct_or_union_specifier(pMyGrammarParser)
 *  - 
 MyGrammarParser_struct_or_union_return
      pMyGrammarParser->struct_or_union(pMyGrammarParser)
 *  - 
 MyGrammarParser_struct_declaration_list_return
      pMyGrammarParser->struct_declaration_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_struct_declaration_return
      pMyGrammarParser->struct_declaration(pMyGrammarParser)
 *  - 
 MyGrammarParser_specifier_qualifier_list_return
      pMyGrammarParser->specifier_qualifier_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_struct_declarator_list_return
      pMyGrammarParser->struct_declarator_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_struct_declarator_return
      pMyGrammarParser->struct_declarator(pMyGrammarParser)
 *  - 
 MyGrammarParser_enum_specifier_return
      pMyGrammarParser->enum_specifier(pMyGrammarParser)
 *  - 
 MyGrammarParser_enumerator_list_return
      pMyGrammarParser->enumerator_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_enumerator_return
      pMyGrammarParser->enumerator(pMyGrammarParser)
 *  - 
 MyGrammarParser_type_qualifier_return
      pMyGrammarParser->type_qualifier(pMyGrammarParser)
 *  - 
 MyGrammarParser_declarator_return
      pMyGrammarParser->declarator(pMyGrammarParser)
 *  - 
 MyGrammarParser_direct_declarator_return
      pMyGrammarParser->direct_declarator(pMyGrammarParser)
 *  - 
 MyGrammarParser_declarator_suffix_return
      pMyGrammarParser->declarator_suffix(pMyGrammarParser)
 *  - 
 MyGrammarParser_pointer_return
      pMyGrammarParser->pointer(pMyGrammarParser)
 *  - 
 MyGrammarParser_parameter_type_list_return
      pMyGrammarParser->parameter_type_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_parameter_list_return
      pMyGrammarParser->parameter_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_parameter_declaration_return
      pMyGrammarParser->parameter_declaration(pMyGrammarParser)
 *  - 
 MyGrammarParser_identifier_list_return
      pMyGrammarParser->identifier_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_type_name_return
      pMyGrammarParser->type_name(pMyGrammarParser)
 *  - 
 MyGrammarParser_abstract_declarator_return
      pMyGrammarParser->abstract_declarator(pMyGrammarParser)
 *  - 
 MyGrammarParser_direct_abstract_declarator_return
      pMyGrammarParser->direct_abstract_declarator(pMyGrammarParser)
 *  - 
 MyGrammarParser_abstract_declarator_suffix_return
      pMyGrammarParser->abstract_declarator_suffix(pMyGrammarParser)
 *  - 
 MyGrammarParser_initializer_return
      pMyGrammarParser->initializer(pMyGrammarParser)
 *  - 
 MyGrammarParser_initializer_list_return
      pMyGrammarParser->initializer_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_argument_expression_list_return
      pMyGrammarParser->argument_expression_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_additive_expression_return
      pMyGrammarParser->additive_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_multiplicative_expression_return
      pMyGrammarParser->multiplicative_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_cast_expression_return
      pMyGrammarParser->cast_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_unary_expression_return
      pMyGrammarParser->unary_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_postfix_expression_return
      pMyGrammarParser->postfix_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_unary_operator_return
      pMyGrammarParser->unary_operator(pMyGrammarParser)
 *  - 
 MyGrammarParser_primary_expression_return
      pMyGrammarParser->primary_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_constant_return
      pMyGrammarParser->constant(pMyGrammarParser)
 *  - 
 MyGrammarParser_expression_return
      pMyGrammarParser->expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_constant_expression_return
      pMyGrammarParser->constant_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_assignment_expression_return
      pMyGrammarParser->assignment_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_lvalue_return
      pMyGrammarParser->lvalue(pMyGrammarParser)
 *  - 
 MyGrammarParser_assignment_operator_return
      pMyGrammarParser->assignment_operator(pMyGrammarParser)
 *  - 
 MyGrammarParser_conditional_expression_return
      pMyGrammarParser->conditional_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_logical_or_expression_return
      pMyGrammarParser->logical_or_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_logical_and_expression_return
      pMyGrammarParser->logical_and_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_inclusive_or_expression_return
      pMyGrammarParser->inclusive_or_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_exclusive_or_expression_return
      pMyGrammarParser->exclusive_or_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_and_expression_return
      pMyGrammarParser->and_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_equality_expression_return
      pMyGrammarParser->equality_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_relational_expression_return
      pMyGrammarParser->relational_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_shift_expression_return
      pMyGrammarParser->shift_expression(pMyGrammarParser)
 *  - 
 MyGrammarParser_statement_return
      pMyGrammarParser->statement(pMyGrammarParser)
 *  - 
 MyGrammarParser_labeled_statement_return
      pMyGrammarParser->labeled_statement(pMyGrammarParser)
 *  - 
 MyGrammarParser_compound_statement_return
      pMyGrammarParser->compound_statement(pMyGrammarParser)
 *  - 
 MyGrammarParser_statement_list_return
      pMyGrammarParser->statement_list(pMyGrammarParser)
 *  - 
 MyGrammarParser_expression_statement_return
      pMyGrammarParser->expression_statement(pMyGrammarParser)
 *  - 
 MyGrammarParser_selection_statement_return
      pMyGrammarParser->selection_statement(pMyGrammarParser)
 *  - 
 MyGrammarParser_iteration_statement_return
      pMyGrammarParser->iteration_statement(pMyGrammarParser)
 *  - 
 MyGrammarParser_jump_statement_return
      pMyGrammarParser->jump_statement(pMyGrammarParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MyGrammarParser_H
#define _MyGrammarParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MyGrammarParser_Ctx_struct MyGrammarParser, * pMyGrammarParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct MyGrammarParser_translation_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_translation_unit_return;



typedef struct MyGrammarParser_external_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_external_declaration_return;



typedef struct MyGrammarParser_function_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_function_definition_return;



typedef struct MyGrammarParser_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_declaration_return;



typedef struct MyGrammarParser_declaration_specifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_declaration_specifiers_return;



typedef struct MyGrammarParser_init_declarator_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_init_declarator_list_return;



typedef struct MyGrammarParser_init_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_init_declarator_return;



typedef struct MyGrammarParser_storage_class_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_storage_class_specifier_return;



typedef struct MyGrammarParser_type_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_type_specifier_return;



typedef struct MyGrammarParser_type_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_type_id_return;



typedef struct MyGrammarParser_struct_or_union_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_struct_or_union_specifier_return;



typedef struct MyGrammarParser_struct_or_union_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_struct_or_union_return;



typedef struct MyGrammarParser_struct_declaration_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_struct_declaration_list_return;



typedef struct MyGrammarParser_struct_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_struct_declaration_return;



typedef struct MyGrammarParser_specifier_qualifier_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_specifier_qualifier_list_return;



typedef struct MyGrammarParser_struct_declarator_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_struct_declarator_list_return;



typedef struct MyGrammarParser_struct_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_struct_declarator_return;



typedef struct MyGrammarParser_enum_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_enum_specifier_return;



typedef struct MyGrammarParser_enumerator_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_enumerator_list_return;



typedef struct MyGrammarParser_enumerator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_enumerator_return;



typedef struct MyGrammarParser_type_qualifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_type_qualifier_return;



typedef struct MyGrammarParser_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_declarator_return;



typedef struct MyGrammarParser_direct_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_direct_declarator_return;



typedef struct MyGrammarParser_declarator_suffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_declarator_suffix_return;



typedef struct MyGrammarParser_pointer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_pointer_return;



typedef struct MyGrammarParser_parameter_type_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_parameter_type_list_return;



typedef struct MyGrammarParser_parameter_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_parameter_list_return;



typedef struct MyGrammarParser_parameter_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_parameter_declaration_return;



typedef struct MyGrammarParser_identifier_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_identifier_list_return;



typedef struct MyGrammarParser_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_type_name_return;



typedef struct MyGrammarParser_abstract_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_abstract_declarator_return;



typedef struct MyGrammarParser_direct_abstract_declarator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_direct_abstract_declarator_return;



typedef struct MyGrammarParser_abstract_declarator_suffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_abstract_declarator_suffix_return;



typedef struct MyGrammarParser_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_initializer_return;



typedef struct MyGrammarParser_initializer_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_initializer_list_return;



typedef struct MyGrammarParser_argument_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_argument_expression_list_return;



typedef struct MyGrammarParser_additive_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_additive_expression_return;



typedef struct MyGrammarParser_multiplicative_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_multiplicative_expression_return;



typedef struct MyGrammarParser_cast_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_cast_expression_return;



typedef struct MyGrammarParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_unary_expression_return;



typedef struct MyGrammarParser_postfix_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_postfix_expression_return;



typedef struct MyGrammarParser_unary_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_unary_operator_return;



typedef struct MyGrammarParser_primary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_primary_expression_return;



typedef struct MyGrammarParser_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_constant_return;



typedef struct MyGrammarParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_expression_return;



typedef struct MyGrammarParser_constant_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_constant_expression_return;



typedef struct MyGrammarParser_assignment_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_assignment_expression_return;



typedef struct MyGrammarParser_lvalue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_lvalue_return;



typedef struct MyGrammarParser_assignment_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_assignment_operator_return;



typedef struct MyGrammarParser_conditional_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_conditional_expression_return;



typedef struct MyGrammarParser_logical_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_logical_or_expression_return;



typedef struct MyGrammarParser_logical_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_logical_and_expression_return;



typedef struct MyGrammarParser_inclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_inclusive_or_expression_return;



typedef struct MyGrammarParser_exclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_exclusive_or_expression_return;



typedef struct MyGrammarParser_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_and_expression_return;



typedef struct MyGrammarParser_equality_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_equality_expression_return;



typedef struct MyGrammarParser_relational_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_relational_expression_return;



typedef struct MyGrammarParser_shift_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_shift_expression_return;



typedef struct MyGrammarParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_statement_return;



typedef struct MyGrammarParser_labeled_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_labeled_statement_return;



typedef struct MyGrammarParser_compound_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_compound_statement_return;



typedef struct MyGrammarParser_statement_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_statement_list_return;



typedef struct MyGrammarParser_expression_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_expression_statement_return;



typedef struct MyGrammarParser_selection_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_selection_statement_return;



typedef struct MyGrammarParser_iteration_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_iteration_statement_return;



typedef struct MyGrammarParser_jump_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyGrammarParser_jump_statement_return;




/** Context tracking structure for 
MyGrammarParser

 */
struct MyGrammarParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     MyGrammarParser_translation_unit_return
     (*translation_unit)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_external_declaration_return
     (*external_declaration)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_function_definition_return
     (*function_definition)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_declaration_return
     (*declaration)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_declaration_specifiers_return
     (*declaration_specifiers)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_init_declarator_list_return
     (*init_declarator_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_init_declarator_return
     (*init_declarator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_storage_class_specifier_return
     (*storage_class_specifier)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_type_specifier_return
     (*type_specifier)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_type_id_return
     (*type_id)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_struct_or_union_specifier_return
     (*struct_or_union_specifier)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_struct_or_union_return
     (*struct_or_union)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_struct_declaration_list_return
     (*struct_declaration_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_struct_declaration_return
     (*struct_declaration)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_specifier_qualifier_list_return
     (*specifier_qualifier_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_struct_declarator_list_return
     (*struct_declarator_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_struct_declarator_return
     (*struct_declarator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_enum_specifier_return
     (*enum_specifier)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_enumerator_list_return
     (*enumerator_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_enumerator_return
     (*enumerator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_type_qualifier_return
     (*type_qualifier)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_declarator_return
     (*declarator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_direct_declarator_return
     (*direct_declarator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_declarator_suffix_return
     (*declarator_suffix)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_pointer_return
     (*pointer)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_parameter_type_list_return
     (*parameter_type_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_parameter_list_return
     (*parameter_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_parameter_declaration_return
     (*parameter_declaration)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_identifier_list_return
     (*identifier_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_type_name_return
     (*type_name)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_abstract_declarator_return
     (*abstract_declarator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_direct_abstract_declarator_return
     (*direct_abstract_declarator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_abstract_declarator_suffix_return
     (*abstract_declarator_suffix)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_initializer_return
     (*initializer)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_initializer_list_return
     (*initializer_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_argument_expression_list_return
     (*argument_expression_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_additive_expression_return
     (*additive_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_multiplicative_expression_return
     (*multiplicative_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_cast_expression_return
     (*cast_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_unary_expression_return
     (*unary_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_postfix_expression_return
     (*postfix_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_unary_operator_return
     (*unary_operator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_primary_expression_return
     (*primary_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_constant_return
     (*constant)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_expression_return
     (*expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_constant_expression_return
     (*constant_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_assignment_expression_return
     (*assignment_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_lvalue_return
     (*lvalue)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_assignment_operator_return
     (*assignment_operator)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_conditional_expression_return
     (*conditional_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_logical_or_expression_return
     (*logical_or_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_logical_and_expression_return
     (*logical_and_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_inclusive_or_expression_return
     (*inclusive_or_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_exclusive_or_expression_return
     (*exclusive_or_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_and_expression_return
     (*and_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_equality_expression_return
     (*equality_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_relational_expression_return
     (*relational_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_shift_expression_return
     (*shift_expression)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_statement_return
     (*statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_labeled_statement_return
     (*labeled_statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_compound_statement_return
     (*compound_statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_statement_list_return
     (*statement_list)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_expression_statement_return
     (*expression_statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_selection_statement_return
     (*selection_statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_iteration_statement_return
     (*iteration_statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     MyGrammarParser_jump_statement_return
     (*jump_statement)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred4_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred5_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred12_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred35_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred45_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred47_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred50_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred51_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred52_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred53_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred54_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred55_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred58_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred59_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred62_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred65_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred78_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred83_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred104_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred136_MyGrammar)	(struct MyGrammarParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MyGrammarParser_Ctx_struct * ctx);
    void	    (*free)   (struct MyGrammarParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMyGrammarParser MyGrammarParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pMyGrammarParser MyGrammarParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__23      23
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define CHARACTER_LITERAL      4
#define COMMENT      5
#define DECIMAL_LITERAL      6
#define EscapeSequence      7
#define Exponent      8
#define FLOATING_POINT_LITERAL      9
#define FloatTypeSuffix      10
#define HEX_LITERAL      11
#define HexDigit      12
#define IDENTIFIER      13
#define IntegerTypeSuffix      14
#define LETTER      15
#define LINE_COMMAND      16
#define LINE_COMMENT      17
#define OCTAL_LITERAL      18
#define OctalEscape      19
#define STRING_LITERAL      20
#define UnicodeEscape      21
#define WS      22
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MyGrammarParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
