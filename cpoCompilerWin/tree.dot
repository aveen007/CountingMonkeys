digraph {

	ordering=out;
	ranksep=.4;
	bgcolor="lightgrey";  node [shape=box, fixedsize=false, fontsize=12, fontname="Helvetica-bold", fontcolor="blue"
	width=.25, height=.25, color="black", fillcolor="white", style="filled, solid, bold"];

	edge [arrowsize=.5, color="black", style="bold"]

	n000012BCE8018368[label="Sourcer"]
	n000012BCE8018230[label="Source"]
	n000012BCE8006D88[label="FuncDef"]
	n000012BCE8001BE0[label="FuncSignature"]
	n000012BCE8001D18[label="calculator"]
	n000012BCE8001AA8[label="ListArgdef"]
	n000012BCE8002468[label="VarStatement"]
	n000012BCE8001F88[label="ListIdentifier"]
	n000012BCE8001E50[label="i"]
	n000012BCE80020C0[label="sum"]
	n000012BCE80025A0[label="TypeRef"]
	n000012BCE8002330[label="int"]
	n000012BCE8002F60[label="Expression"]
	n000012BCE8003440[label="="]
	n000012BCE8003098[label="300"]
	n000012BCE8002810[label="i"]
	n000012BCE80041A8[label="Expression"]
	n000012BCE80047C0[label="="]
	n000012BCE8004688[label="+"]
	n000012BCE80048F8[label="6"]
	n000012BCE8004418[label="i"]
	n000012BCE8003578[label="sum"]
	n000012BCE8005DB0[label="Expression"]
	n000012BCE8006020[label="CallOrIndexer"]
	n000012BCE8005EE8[label="ListExpr"]
	n000012BCE8005528[label="sum"]
	n000012BCE8004B68[label="print_value"]
	n000012BCE8006EC0[label="Expression"]
	n000012BCE80074D8[label="="]
	n000012BCE80073A0[label="/"]
	n000012BCE8007610[label="2"]
	n000012BCE8007130[label="i"]
	n000012BCE8006290[label="sum"]
	n000012BCE8001970[label="end"]
	n000012BCE8011F78[label="FuncDef"]
	n000012BCE8007C28[label="FuncSignature"]
	n000012BCE8007D60[label="print_value"]
	n000012BCE8007AF0[label="ListArgdef"]
	n000012BCE8007880[label="ArgDef"]
	n000012BCE8006FF8[label="sum"]
	n000012BCE80085E8[label="VarStatement"]
	n000012BCE8007FD0[label="ListIdentifier"]
	n000012BCE8007E98[label="nextLine"]
	n000012BCE8008108[label="revertedNum"]
	n000012BCE8008240[label="tmp"]
	n000012BCE8008720[label="TypeRef"]
	n000012BCE80084B0[label="int"]
	n000012BCE80090E0[label="Expression"]
	n000012BCE80095C0[label="="]
	n000012BCE8009218[label="10"]
	n000012BCE8008990[label="nextLine"]
	n000012BCE8009E48[label="Expression"]
	n000012BCE800A328[label="="]
	n000012BCE8009F80[label="0"]
	n000012BCE80096F8[label="revertedNum"]
	n000012BCE8010D30[label="WhileStatement"]
	n000012BCE8010FA0[label="Expression"]
	n000012BCE800ACE8[label="!="]
	n000012BCE800AF58[label="0"]
	n000012BCE800A460[label="sum"]
	n000012BCE800BF30[label="Expression"]
	n000012BCE800C548[label="="]
	n000012BCE800C410[label="*"]
	n000012BCE800C680[label="10"]
	n000012BCE800C1A0[label="revertedNum"]
	n000012BCE800B300[label="revertedNum"]
	n000012BCE800D520[label="Expression"]
	n000012BCE800DB38[label="="]
	n000012BCE800DA00[label=""]
	n000012BCE800DC70[label="10"]
	n000012BCE800D790[label="sum"]
	n000012BCE800C8F0[label="tmp"]
	n000012BCE800E630[label="Expression"]
	n000012BCE800EB10[label="="]
	n000012BCE800E768[label="tmp"]
	n000012BCE800DEE0[label="tmp"]
	n000012BCE800F878[label="Expression"]
	n000012BCE800FE90[label="="]
	n000012BCE800FD58[label="+"]
	n000012BCE800FFC8[label="tmp"]
	n000012BCE800FAE8[label="revertedNum"]
	n000012BCE800EC48[label="revertedNum"]
	n000012BCE8010E68[label="Expression"]
	n000012BCE8011480[label="="]
	n000012BCE8011348[label="/"]
	n000012BCE80115B8[label="10"]
	n000012BCE80110D8[label="sum"]
	n000012BCE8010238[label="sum"]
	n000012BCE8017600[label="WhileStatement"]
	n000012BCE8017870[label="Expression"]
	n000012BCE80121E8[label="!="]
	n000012BCE8012458[label="0"]
	n000012BCE8011960[label="revertedNum"]
	n000012BCE8013430[label="Expression"]
	n000012BCE8013A48[label="="]
	n000012BCE8013910[label=""]
	n000012BCE8013B80[label="10"]
	n000012BCE80136A0[label="revertedNum"]
	n000012BCE8012800[label="tmp"]
	n000012BCE8014A20[label="Expression"]
	n000012BCE8015038[label="="]
	n000012BCE8014F00[label="+"]
	n000012BCE8015170[label="48"]
	n000012BCE8014C90[label="tmp"]
	n000012BCE8013DF0[label="tmp"]
	n000012BCE8016628[label="Expression"]
	n000012BCE8016898[label="CallOrIndexer"]
	n000012BCE8016760[label="ListExpr"]
	n000012BCE8015DA0[label="tmp"]
	n000012BCE80153E0[label="print"]
	n000012BCE8017738[label="Expression"]
	n000012BCE8017D50[label="="]
	n000012BCE8017C18[label="/"]
	n000012BCE8017E88[label="10"]
	n000012BCE80179A8[label="revertedNum"]
	n000012BCE8016B08[label="revertedNum"]
	n000012BCE80079B8[label="end"]

		n000012BCE8018368 -> n000012BCE8018230		// Sourcer -> Source
		n000012BCE8018230 -> n000012BCE8006D88		// Source -> FuncDef
		n000012BCE8006D88 -> n000012BCE8001BE0		// FuncDef -> FuncSignature
		n000012BCE8001BE0 -> n000012BCE8001D18		// FuncSignature -> calculator
		n000012BCE8001D18 -> n000012BCE8001AA8		// calculator -> ListArgdef
		n000012BCE8006D88 -> n000012BCE8002468		// FuncDef -> VarStatement
		n000012BCE8002468 -> n000012BCE8001F88		// VarStatement -> ListIdentifier
		n000012BCE8001F88 -> n000012BCE8001E50		// ListIdentifier -> i
		n000012BCE8001F88 -> n000012BCE80020C0		// ListIdentifier -> sum
		n000012BCE8002468 -> n000012BCE80025A0		// VarStatement -> TypeRef
		n000012BCE80025A0 -> n000012BCE8002330		// TypeRef -> int
		n000012BCE8006D88 -> n000012BCE8002F60		// FuncDef -> Expression
		n000012BCE8002F60 -> n000012BCE8003440		// Expression -> =
		n000012BCE8003440 -> n000012BCE8003098		// = -> 300
		n000012BCE8003440 -> n000012BCE8002810		// = -> i
		n000012BCE8006D88 -> n000012BCE80041A8		// FuncDef -> Expression
		n000012BCE80041A8 -> n000012BCE80047C0		// Expression -> =
		n000012BCE80047C0 -> n000012BCE8004688		// = -> +
		n000012BCE8004688 -> n000012BCE80048F8		// + -> 6
		n000012BCE8004688 -> n000012BCE8004418		// + -> i
		n000012BCE80047C0 -> n000012BCE8003578		// = -> sum
		n000012BCE8006D88 -> n000012BCE8005DB0		// FuncDef -> Expression
		n000012BCE8005DB0 -> n000012BCE8006020		// Expression -> CallOrIndexer
		n000012BCE8006020 -> n000012BCE8005EE8		// CallOrIndexer -> ListExpr
		n000012BCE8005EE8 -> n000012BCE8005528		// ListExpr -> sum
		n000012BCE8006020 -> n000012BCE8004B68		// CallOrIndexer -> print_value
		n000012BCE8006D88 -> n000012BCE8006EC0		// FuncDef -> Expression
		n000012BCE8006EC0 -> n000012BCE80074D8		// Expression -> =
		n000012BCE80074D8 -> n000012BCE80073A0		// = -> /
		n000012BCE80073A0 -> n000012BCE8007610		// / -> 2
		n000012BCE80073A0 -> n000012BCE8007130		// / -> i
		n000012BCE80074D8 -> n000012BCE8006290		// = -> sum
		n000012BCE8006D88 -> n000012BCE8001970		// FuncDef -> end
		n000012BCE8018230 -> n000012BCE8011F78		// Source -> FuncDef
		n000012BCE8011F78 -> n000012BCE8007C28		// FuncDef -> FuncSignature
		n000012BCE8007C28 -> n000012BCE8007D60		// FuncSignature -> print_value
		n000012BCE8007D60 -> n000012BCE8007AF0		// print_value -> ListArgdef
		n000012BCE8007AF0 -> n000012BCE8007880		// ListArgdef -> ArgDef
		n000012BCE8007880 -> n000012BCE8006FF8		// ArgDef -> sum
		n000012BCE8011F78 -> n000012BCE80085E8		// FuncDef -> VarStatement
		n000012BCE80085E8 -> n000012BCE8007FD0		// VarStatement -> ListIdentifier
		n000012BCE8007FD0 -> n000012BCE8007E98		// ListIdentifier -> nextLine
		n000012BCE8007FD0 -> n000012BCE8008108		// ListIdentifier -> revertedNum
		n000012BCE8007FD0 -> n000012BCE8008240		// ListIdentifier -> tmp
		n000012BCE80085E8 -> n000012BCE8008720		// VarStatement -> TypeRef
		n000012BCE8008720 -> n000012BCE80084B0		// TypeRef -> int
		n000012BCE8011F78 -> n000012BCE80090E0		// FuncDef -> Expression
		n000012BCE80090E0 -> n000012BCE80095C0		// Expression -> =
		n000012BCE80095C0 -> n000012BCE8009218		// = -> 10
		n000012BCE80095C0 -> n000012BCE8008990		// = -> nextLine
		n000012BCE8011F78 -> n000012BCE8009E48		// FuncDef -> Expression
		n000012BCE8009E48 -> n000012BCE800A328		// Expression -> =
		n000012BCE800A328 -> n000012BCE8009F80		// = -> 0
		n000012BCE800A328 -> n000012BCE80096F8		// = -> revertedNum
		n000012BCE8011F78 -> n000012BCE8010D30		// FuncDef -> WhileStatement
		n000012BCE8010D30 -> n000012BCE8010FA0		// WhileStatement -> Expression
		n000012BCE8010FA0 -> n000012BCE800ACE8		// Expression -> !=
		n000012BCE800ACE8 -> n000012BCE800AF58		// != -> 0
		n000012BCE800ACE8 -> n000012BCE800A460		// != -> sum
		n000012BCE8010D30 -> n000012BCE800BF30		// WhileStatement -> Expression
		n000012BCE800BF30 -> n000012BCE800C548		// Expression -> =
		n000012BCE800C548 -> n000012BCE800C410		// = -> *
		n000012BCE800C410 -> n000012BCE800C680		// * -> 10
		n000012BCE800C410 -> n000012BCE800C1A0		// * -> revertedNum
		n000012BCE800C548 -> n000012BCE800B300		// = -> revertedNum
		n000012BCE8010D30 -> n000012BCE800D520		// WhileStatement -> Expression
		n000012BCE800D520 -> n000012BCE800DB38		// Expression -> =
		n000012BCE800DB38 -> n000012BCE800DA00		// = -> 
		n000012BCE800DA00 -> n000012BCE800DC70		// > 10
		n000012BCE800DA00 -> n000012BCE800D790		// > sum
		n000012BCE800DB38 -> n000012BCE800C8F0		// = -> tmp
		n000012BCE8010D30 -> n000012BCE800E630		// WhileStatement -> Expression
		n000012BCE800E630 -> n000012BCE800EB10		// Expression -> =
		n000012BCE800EB10 -> n000012BCE800E768		// = -> tmp
		n000012BCE800EB10 -> n000012BCE800DEE0		// = -> tmp
		n000012BCE8010D30 -> n000012BCE800F878		// WhileStatement -> Expression
		n000012BCE800F878 -> n000012BCE800FE90		// Expression -> =
		n000012BCE800FE90 -> n000012BCE800FD58		// = -> +
		n000012BCE800FD58 -> n000012BCE800FFC8		// + -> tmp
		n000012BCE800FD58 -> n000012BCE800FAE8		// + -> revertedNum
		n000012BCE800FE90 -> n000012BCE800EC48		// = -> revertedNum
		n000012BCE8010D30 -> n000012BCE8010E68		// WhileStatement -> Expression
		n000012BCE8010E68 -> n000012BCE8011480		// Expression -> =
		n000012BCE8011480 -> n000012BCE8011348		// = -> /
		n000012BCE8011348 -> n000012BCE80115B8		// / -> 10
		n000012BCE8011348 -> n000012BCE80110D8		// / -> sum
		n000012BCE8011480 -> n000012BCE8010238		// = -> sum
		n000012BCE8011F78 -> n000012BCE8017600		// FuncDef -> WhileStatement
		n000012BCE8017600 -> n000012BCE8017870		// WhileStatement -> Expression
		n000012BCE8017870 -> n000012BCE80121E8		// Expression -> !=
		n000012BCE80121E8 -> n000012BCE8012458		// != -> 0
		n000012BCE80121E8 -> n000012BCE8011960		// != -> revertedNum
		n000012BCE8017600 -> n000012BCE8013430		// WhileStatement -> Expression
		n000012BCE8013430 -> n000012BCE8013A48		// Expression -> =
		n000012BCE8013A48 -> n000012BCE8013910		// = -> 
		n000012BCE8013910 -> n000012BCE8013B80		// > 10
		n000012BCE8013910 -> n000012BCE80136A0		// > revertedNum
		n000012BCE8013A48 -> n000012BCE8012800		// = -> tmp
		n000012BCE8017600 -> n000012BCE8014A20		// WhileStatement -> Expression
		n000012BCE8014A20 -> n000012BCE8015038		// Expression -> =
		n000012BCE8015038 -> n000012BCE8014F00		// = -> +
		n000012BCE8014F00 -> n000012BCE8015170		// + -> 48
		n000012BCE8014F00 -> n000012BCE8014C90		// + -> tmp
		n000012BCE8015038 -> n000012BCE8013DF0		// = -> tmp
		n000012BCE8017600 -> n000012BCE8016628		// WhileStatement -> Expression
		n000012BCE8016628 -> n000012BCE8016898		// Expression -> CallOrIndexer
		n000012BCE8016898 -> n000012BCE8016760		// CallOrIndexer -> ListExpr
		n000012BCE8016760 -> n000012BCE8015DA0		// ListExpr -> tmp
		n000012BCE8016898 -> n000012BCE80153E0		// CallOrIndexer -> print
		n000012BCE8017600 -> n000012BCE8017738		// WhileStatement -> Expression
		n000012BCE8017738 -> n000012BCE8017D50		// Expression -> =
		n000012BCE8017D50 -> n000012BCE8017C18		// = -> /
		n000012BCE8017C18 -> n000012BCE8017E88		// / -> 10
		n000012BCE8017C18 -> n000012BCE80179A8		// / -> revertedNum
		n000012BCE8017D50 -> n000012BCE8016B08		// = -> revertedNum
		n000012BCE8011F78 -> n000012BCE80079B8		// FuncDef -> end

}