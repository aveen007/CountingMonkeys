architecture spo {
/*
	case                18
	data word length    2
	code model          m_stack
	spaces              common ram
*/
registers:

  storage sp [16];     // Stack pointer
  storage ip [16];     // Program counter (Instruction pointer)
  storage ebp [16];
  storage esp [16];
  storage inp [16];     // Input register (for input operations)
  storage outp [16];    // Output register (for output operations)
  storage heap_base[16];

memory:

  range ram [0x0000..0xffff] {   // Common RAM space for code/data
    cell = 16;     // 8-bit cells
    endianess = little-endian;  // Little endian
    granularity = 2;  // 2-byte chunks
  }

  range m_stack [0x0000..0xffff] {   // Stack space
    cell = 16;
    endianess = little-endian;
    granularity = 2;
  }

instructions:
	encode imm16 field = immediate [16];
	encode reg field = register {
		esp = 0,
		ebp = 1};
		
 // Push immediate value onto the stack
  instruction push = { 0000 0000, imm16 as value } {
    m_stack:2[sp] = value;
    sp = sp - 2;   // Decrement stack pointer
    ip = ip + 3;   // Increment instruction pointer
  };
  // Pop value from the stack into outp
  instruction pop = { 0000 0001 } {
    sp = sp + 2;        // Increment stack pointer
    ip = ip + 1;        // Increment instruction pointer
  };

  instruction popOut = { 0000 0010 } {
    sp = sp + 2;        // Increment stack pointer
    outp = m_stack:2[sp]; // Retrieve value from stack to standard output
    ip = ip + 1;        // Increment instruction pointer
  };



// Add the top two integers on the stack
  instruction iadd = {0000 0011 } {
    sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)
    
    sp = sp + 2;                // Increment stack pointer
    let y = m_stack:2[sp];         // Pop second value into outp (next top value)
    
    let r = x + y;          // Perform addition
    
    m_stack:2[sp] = r;         // Push result back onto the stack
    sp = sp - 2;                // Decrement stack pointer
    ip = ip + 1;                // Increment instruction pointer
};
// Add the top two longs on the stack
 instruction ladd = { 0000 0100 } {
    sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)
    
    sp = sp + 2;                // Increment stack pointer
    let y = m_stack:2[sp];         // Pop second value into outp (next top value)
    
    let r = x + y;          // Perform addition
    
    m_stack:2[sp] = r;         // Push result back onto the stack
    sp = sp - 2;                // Decrement stack pointer
    ip = ip + 1;                // Increment instruction pointer
};
// store the type and the value , maybe I should push the type and value on the top of the stack
//must test store
instruction st = { 0000 0101, imm16 as ptr }
{
	sp=sp + 2;
	ram:2[ptr] = m_stack:2[sp];
	//ram:1[ptr+1] = from>>8;
	
	ip = ip + 3;
};
//instruction r_st = { 0000 1100,  reg as target}
//{
//	sp=sp + 2;
//	target = m_stack:2[sp];	
//	ip = ip + 3;
//};
// I will use this to store the size of the array for array type
instruction a_st = { 0000 0110, imm16 as ptr }
{	
	sp=sp + 2;
	ram:2[ptr+4] = m_stack:2[sp];// we save 8 bytes for each variable , store the type in the first 4 bytes (32 bits from the stack) and the value in the next
	ip = ip + 3;
};
// to create load I have to have different loads (iload, lload..) I also need a general funciton to dispatch to them, but I also need a to recieve the type
// and a way to extract it, and a way to handle the labels, in short I need to know how I figuered out how to store it in metadata section
// were I keep all my variables and their types, or simple just how I am storing so that I can load
  instruction jmp = { 0000 0111, imm16 as target } {
    ip = target;
  };


  instruction jz = { 0000 1000, imm16 as target } {
	sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)
    
    if x == 0x0 then
      ip = target;
    else
      ip = ip + 3;
  };
  // for now, everywhere I pushed the value and then pushed the type to the stack
instruction wide_add ={0000 1001} {
    // Increment stack pointer to "pop" the first operand's pointer
    sp = sp + 2;                
    let type1 = m_stack:2[sp];         // First operand type (address of operand)
    sp = sp + 2;                
    let value1 = m_stack:2[sp];         // Type of first operand (e.g., 2 for number)
    
    // Increment stack pointer to "pop" the second operand's pointer
    sp = sp + 2;                
    let type2 = m_stack:2[sp];         // Second operand pointer
    sp = sp + 2;                
    let value2 = m_stack:2[sp];          // Type of second operand

    // Check if both operands are of type "number" (type == 2)
    if (type1 == 2) && (type2 == 2) then {
        
        let r = value1 + value2;                // Perform addition
        
        // Push the result back onto the stack
        m_stack:2[sp] = r;           
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp]= 2; // push the type
		sp= sp -2;
    } else {
        // Push error code (-1) onto the stack if types don't match
        m_stack:2[sp] = -1;          
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp] = -1;
		sp=sp -2; // push type error
    }

    // Increment instruction pointer to the next instruction
    ip = ip + 1;
};
instruction wide_store = { 0000 1010 }
{	sp=sp + 2;
	let ptr = m_stack:2[sp];// TO
	
	sp=sp + 2;
	let type=m_stack:2[sp];//pop type
	sp=sp + 2;
	let value=m_stack:2[sp];//pop value
	ram:2[ptr] = type;// store type
	
	ram:2[ptr+4] = value;// store value
	ip = ip + 1;
};
instruction wide_sub ={0000 1011} {
    // Increment stack pointer to "pop" the first operand's pointer
    sp = sp + 2;                
    let type1 = m_stack:2[sp];         // First operand type (address of operand)
    sp = sp + 2;                
    let value1 = m_stack:2[sp];         // Type of first operand (e.g., 2 for number)
    
    // Increment stack pointer to "pop" the second operand's pointer
    sp = sp + 2;                
    let type2 = m_stack:2[sp];         // Second operand pointer
    sp = sp + 2;                
    let value2 = m_stack:2[sp];          // Type of second operand

    // Check if both operands are of type "number" (type == 2)
    if (type1 == 2) && (type2 == 2) then {
        
        let r = value1 - value2;                // Perform addition
        
        // Push the result back onto the stack
        m_stack:2[sp] = r;           
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp]= 2; // push the type
		sp= sp -2;
    } else {
        // Push error code (-1) onto the stack if types don't match
        m_stack:2[sp] = -1;          
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp] = -1;
		sp=sp -2; // push type error
    }

    // Increment instruction pointer to the next instruction
    
    ip = ip + 1;
};
instruction wide_mult ={0000 1100} {
    // Increment stack pointer to "pop" the first operand's pointer
    sp = sp + 2;                
    let type1 = m_stack:2[sp];         // First operand type (address of operand)
    sp = sp + 2;                
    let value1 = m_stack:2[sp];         // Type of first operand (e.g., 2 for number)
    
    // Increment stack pointer to "pop" the second operand's pointer
    sp = sp + 2;                
    let type2 = m_stack:2[sp];         // Second operand pointer
    sp = sp + 2;                
    let value2 = m_stack:2[sp];          // Type of second operand

    // Check if both operands are of type "number" (type == 2)
    if (type1 == 2) && (type2 == 2) then {
        
        let r = value1 * value2;                // Perform addition
        
        // Push the result back onto the stack
        m_stack:2[sp] = r;           
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp]= 2; // push the type
		sp= sp -2;
    } else {
        // Push error code (-1) onto the stack if types don't match
        m_stack:2[sp] = -1;          
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp] = -1;
		sp=sp -2; // push type error
    }

    // Increment instruction pointer to the next instruction
    ip = ip + 1;
};
instruction wide_div ={0000 1101} {
     // Increment stack pointer to "pop" the first operand's pointer
    sp = sp + 2;                
    let type1 = m_stack:2[sp];         // First operand type (address of operand)
    sp = sp + 2;                
    let value1 = m_stack:2[sp];         // Type of first operand (e.g., 2 for number)
    
    // Increment stack pointer to "pop" the second operand's pointer
    sp = sp + 2;                
    let type2 = m_stack:2[sp];         // Second operand pointer
    sp = sp + 2;                
    let value2 = m_stack:2[sp];          // Type of second operand

    // Check if both operands are of type "number" (type == 2)
    if (type1 == 2) && (type2 == 2) then {
        
        let r = value1 / value2;                // Perform addition
        
        // Push the result back onto the stack
        m_stack:2[sp] = r;           
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp]= 2; // push the type
		sp= sp -2;
    } else {
        // Push error code (-1) onto the stack if types don't match
        m_stack:2[sp] = -1;          
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp] = -1;
		sp=sp -2; // push type error
    }

    // Increment instruction pointer to the next instruction
    ip = ip + 1;
};
  instruction jgt = { 0000 1111, imm16 as target } {
	sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)

    if (x >> 15 == 0x0) && (x != 0x0) then
      ip = target;
    else
      ip = ip + 3;
  };
    instruction jge = { 0001 0000, imm16 as target } {
	sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)

    if (x >> 15 == 0x0)  then
      ip = target;
    else
      ip = ip + 3;
  };

      instruction jlt = { 0001 0001, imm16 as target } {
	sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)

    if (x >> 15 == 0x1)  then
      ip = target;
    else
      ip = ip + 3;
  };

        instruction jle = { 0001 0010, imm16 as target } {
	sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)

    if (x >> 15 == 0x1) || (x == 0x0) then
      ip = target;
    else
      ip = ip + 3;
  };
  // Halt execution
  instruction hlt = { 1111 1111 } {
    // Execution halts
  };
  
    instruction write = { 0001 0011 } {
	sp = sp +2 ;
	let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)

    outp = x; // Retrieve value from stack to standard output
    ip = ip + 1;        // Increment instruction pointer
  };
    instruction read = { 0001 0100  } {
	sp = sp + 2 ;
	let ptr= m_stack:2[sp];
	
    ram:2[ptr+4] = inp;
    ip = ip + 1;   // Increment instruction pointer
  };
    instruction jmp_emp = { 0001 0101, imm16 as ptr } {
	sp = sp + 2;                // Increment stack pointer
    let target = ram:2[ptr];  
    ip = target;
  };
  instruction wide_mod ={0001 0110} {
     sp = sp + 2;                
    let type1 = m_stack:2[sp];         // First operand type (address of operand)
    sp = sp + 2;                
    let value1 = m_stack:2[sp];         // Type of first operand (e.g., 2 for number)
    
    // Increment stack pointer to "pop" the second operand's pointer
    sp = sp + 2;                
    let type2 = m_stack:2[sp];         // Second operand pointer
    sp = sp + 2;                
    let value2 = m_stack:2[sp];          // Type of second operand

    // Check if both operands are of type "number" (type == 2)
    if (type1 == 2) && (type2 == 2) then {
        
        let r = value1 % value2;                // Perform addition
        
        // Push the result back onto the stack
        m_stack:2[sp] = r;           
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp]= 2; // push the type
		sp= sp -2;
    } else {
        // Push error code (-1) onto the stack if types don't match
        m_stack:2[sp] = -1;          
        sp = sp - 2;                  // Decrement stack pointer
		m_stack:2[sp] = -1;
		sp=sp -2; // push type error
    }

    // Increment instruction pointer to the next instruction
    ip = ip + 1;
};

  instruction push_sf ={0001 0111 , imm16 as value} {
	ram[esp]= value;
    esp = esp - 4;   // Decrement stack pointer
    ip = ip + 3;   // Increment instruction pointer
  };
  instruction pop_sf ={0001 1000} {
	esp = esp + 4;        // Increment stack pointer
	   
    ip = ip + 1;        // Increment instruction pointer
};

  instruction call = { 0001 1010, imm16 as ptr, 0000 0000 } {
	esp = esp + 4;
	ram:2[esp] = ip + 4; // save return point
	esp=esp + 4;
	ram:2[esp]= ebp; // save the old ebp	
	

	ebp = esp;
	ip = ptr;
  };
  instruction ret = { 0001 1011  } {
		//if ebp != 0 then {
			esp = ebp;
			ebp = ram:2[esp] ;
			esp = esp - 4;			
			ip = ram:2[esp];
			esp = esp - 4;
			//	}
		//ip = ip + 4;
	//	ip=ip + 1;
};
  instruction load = { 0001 1100 } {
		sp= sp + 2; // pop the pointer to the value in ram
		let ptr= m_stack:2[sp];		
		let type = ram:2[ptr];
		let value = ram:2[ptr + 4];
		m_stack[sp]= value;
		sp =sp -2; //push the value 
		m_stack[sp]= type;
		sp =sp -2; //push the type 
		ip=ip+1; 
};
instruction add_reg_imm = { 0001 1101, imm16 as value } {
		if value ==1 then {
		m_stack:2[sp] = ebp + 4 ;// the size of the cell is 2 bytes (16 bits) and I need 4 for value and 4 for type
		}
		else {
		m_stack:2[sp] = ebp +8 *(value - 1) +4 ;
		}
		sp = sp - 2;   // Decrement stack pointer
		ip=ip+3; 
};

instruction sub_reg_imm = { 0001 1110, imm16 as value } {
		if value ==1 then {
		m_stack:2[sp] = ebp -4 * value +8;
		}
		else {
		m_stack:2[sp] = ebp - (8 * (value - 1)) + 4;
		}
		sp = sp - 2;   // Decrement stack pointer

		ip=ip+3; 
};
instruction add_mem_imm = { 0010 0011, imm16 as value } {
		sp =sp + 2;
		let x= m_stack:2[sp]; // our pointer
		sp =sp + 2;
		let z= m_stack:2[sp];// filler value
		let y = x + value*8  ;
		
		m_stack[sp]= y;
		sp = sp - 2;
		ip = ip + 3;
		
};

instruction init ={ 0001 1111,imm16 as target }{
	ebp=target;
	esp=ebp;
	heap_base=0x7A00;
	ip=ip + 3;
};
  instruction pop_hf ={0010 0000} {
	heap_base = heap_base + 4;        // Increment stack pointer
	   
    ip = ip + 1;        // Increment instruction pointer
};
  instruction pop_vtable ={0010 0001, imm16 as value} {
	
    ram:2[heap_base]=value;
	heap_base = heap_base + 4;        // Increment stack pointer
	   
    ip = ip + 3;        // Increment instruction pointer
};

 instruction push_hf = { 0010 0010} {
	heap_base = heap_base + 4; 
    m_stack:2[sp] = heap_base;
    sp = sp - 2;   // Decrement stack pointer
    ip = ip + 1;   // Increment instruction pointer
  };
  
  instruction call_from_stack = { 0010 0100 } {
	
	let ptr= m_stack:2[sp]; // our pointer
	esp = esp + 4; 
	ram:2[esp] = ip + 1; // save return point
	esp=esp + 4;
	ram:2[esp]= ebp; // save the old ebp	
	

	ebp = esp;
	ip = ptr;
  };
mnemonics:
  mnemonic init for init(target) "{1}";
  mnemonic push (value) "{1}";
  mnemonic pop() ;
  mnemonic popOut();
  mnemonic iadd();
  mnemonic ladd() ;
  mnemonic jump for jmp(target) "{1}";
  mnemonic jz(target) "{1}";
  mnemonic jgt(target) "{1}";
  mnemonic jge(target) "{1}";
  mnemonic jlt(target) "{1}";
  mnemonic jle(target) "{1}";
  mnemonic add_mem_imm(value) "{1}";
  mnemonic store for st(ptr) "{1}";
  mnemonic astore for a_st(ptr) "{1}";
  mnemonic wide_add();
  mnemonic wide_store();
  mnemonic wide_sub();
  mnemonic wide_mult();
  mnemonic wide_div();  
  mnemonic wide_mod();  
  mnemonic read();
  mnemonic write();
  mnemonic jmp_emp(ptr) "{1}";
  
  mnemonic push_sf (value) "{1}" ;
  mnemonic pop_vtable (value) "{1}" ;
  mnemonic pop_sf () ;
  mnemonic push_hf () ;
  mnemonic pop_hf () ;
  mnemonic call ( ptr) "{1}" ;
  mnemonic ret() ;
  mnemonic call_from_stack() ;
  mnemonic load() ;
  mnemonic add_s for add_reg_imm(value) "{1}" ;
  mnemonic sub_s for sub_reg_imm(value) "{1}" ;
  
  
  
  mnemonic hlt();
}
