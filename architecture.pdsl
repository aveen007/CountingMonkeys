architecture spo {
/*
	case                18
	data word length    2
	code model          m_stack
	spaces              common ram
*/
registers:

  storage sp [16];     // Stack pointer
  storage ip [16];     // Program counter (Instruction pointer)

  storage inp [16];     // Input register (for input operations)
  storage outp [16];    // Output register (for output operations)

memory:

  range ram [0x0000..0xffff] {   // Common RAM space for code/data
    cell = 16;     // 8-bit cells
    endianess = little-endian;  // Little endian
    granularity = 2;  // 2-byte chunks
  }

  range m_stack [0x0000..0xffff] {   // Stack space
    cell = 16;
    endianess = little-endian;
    granularity = 2;
  }

instructions:
	encode imm16 field = immediate [16];
 // Push immediate value onto the stack
  instruction push = { 0000, imm16 as value,0000 } {
    m_stack:2[sp] = value;
    sp = sp - 2;   // Decrement stack pointer
    ip = ip + 3;   // Increment instruction pointer
  };
  // Pop value from the stack into outp
  instruction pop = { 0001, 0000 } {
    sp = sp + 2;        // Increment stack pointer
    ip = ip + 1;        // Increment instruction pointer
  };

  instruction popOut = { 0010, 0000 } {
    sp = sp + 2;        // Increment stack pointer
    outp = m_stack:2[sp]; // Retrieve value from stack to standard output
    ip = ip + 1;        // Increment instruction pointer
  };



// Add the top two integers on the stack
  instruction iadd = { 0011, 0000 } {
    sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)
    
    sp = sp + 2;                // Increment stack pointer
    let y = m_stack:2[sp];         // Pop second value into outp (next top value)
    
    let r = x + y;          // Perform addition
    
    m_stack:2[sp] = r;         // Push result back onto the stack
    sp = sp - 2;                // Decrement stack pointer
    ip = ip + 1;                // Increment instruction pointer
};
// Add the top two longs on the stack
 instruction ladd = { 0100, 0000 } {
    sp = sp + 2;                // Increment stack pointer
    let x = m_stack:2[sp];          // Pop first value into inp (top value of the stack)
    
    sp = sp + 2;                // Increment stack pointer
    let y = m_stack:2[sp];         // Pop second value into outp (next top value)
    
    let r = x + y;          // Perform addition
    
    m_stack:2[sp] = r;         // Push result back onto the stack
    sp = sp - 2;                // Decrement stack pointer
    ip = ip + 1;                // Increment instruction pointer
};
// store the type and the value , maybe I should push the type and value on the top of the stack
//must test store
instruction st = { 0101, imm16 as ptr,0000 }
{
	sp=sp + 2;
	ram:2[ptr] = m_stack:2[sp];
	//ram:1[ptr+1] = from>>8;
	ip = ip + 3;
};
// I will use this to store the size of the array for array type
instruction a_st = { 0110, imm16 as ptr,0000 }
{	
	sp=sp + 2;
	ram:2[ptr+2] = m_stack:2[sp];
	ip = ip + 3;
};
// to create load I have to have different loads (iload, lload..) I also need a general funciton to dispatch to them, but I also need a to recieve the type
// and a way to extract it, and a way to handle the labels, in short I need to know how I figuered out how to store it in metadata section
// were I keep all my variables and their types, or simple just how I am storing so that I can load
  instruction jmp = { 0101, 0000, imm16 as target } {
    ip = target;
  };

  instruction jz = { 0111, imm16 as target,0000 } {
    if inp == 0 then
      ip = target;
    else
      ip = ip + 3;
  };



  // Halt execution
  instruction hlt = { 1111 1111 } {
    // Execution halts
  };
  
  

mnemonics:

  mnemonic push (value) "{1}";
  mnemonic pop() ;
  mnemonic popOut();
  mnemonic iadd();
  mnemonic ladd() ;
  mnemonic jump for jmp(target) "{1}";
  mnemonic jz(target) "{1}";
  mnemonic store for st(ptr) "{1}";
  mnemonic astore for a_st(ptr) "{1}";
  mnemonic hlt();
}
